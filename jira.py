"""Jira Module to create issure and issue to attachment

"""

import os

import requests
from dotenv import load_dotenv
from requests.auth import HTTPBasicAuth

load_dotenv()

JIRA_USER = os.getenv("JIRA_USER")
JIRA_AUTH = os.getenv("JIRA_AUTH")
JIRA_URL = os.getenv("JIRA_URL")

def create_issue(url, summary, body, key_value="ITTIX", issue_type="10002"):
    """Creates an issue on Jira

    Arguments:
        url {str} -- Jira rest URL
        summary {str} -- Summary (Title) of the issue
        body {str} -- Body content of the issue

    Keyword Arguments:
        key_value {str} -- Key Value for the project (default: {"ITTIX"})
        issue_type {str} -- Issue type (default: {"10002"})

    Returns:
        str -- Key for the issue (example: ITTIX-200)
    """

    if url is None:
        url = JIRA_URL + "/rest/api/3/issue"

    jira_headers = {"Content-Type": "application/json", "Accept": "application/json"}
    jira_ticket = {
        "update": {},
        "fields": {
            "summary": summary,
            "project": {
                "key": key_value
            },
            "issue_type": {
                "id": issue_type
            },
            "description": {
                "version": 1,
                "type": "doc",
                "content": [
                    {
                        "type": "paragraph",
                        "content": [
                            {
                                "type": "text",
                                "text": body
                            }
                        ]
                    }
                ]
            }
        }
    }
    try:
        response = requests.post(url, auth=HTTPBasicAuth(JIRA_USER, JIRA_AUTH),
                                 headers=jira_headers, json=jira_ticket)
        return response.json()['key']
    except KeyError as error:
        print("Key not found: ", error)
        return None


def add_text_as_attachment(key, text, filename="log.json"):
    """Adds the text as an attachment in Jira

        Arguments:
            key {str} -- Issue key for the ticket on which the attachment is to be added
            text {str} -- Text to be added with the created file

    Keyword Arguments:
        filename {str} -- Name of the file to be attached in Jira (default: {"log.json"})

    Returns:
        int -- Returns the status code response generated by the post request
    """
    url = JIRA_URL + "/rest/api/3/issue/{}/attachments".format(key)
    jira_file = {"file" : (filename, str(text))}
    jira_header = {"X-Atlassian-Token": "no-check"}
    response = requests.post(url, auth=HTTPBasicAuth(JIRA_USER, JIRA_AUTH), files=jira_file,
                             headers=jira_header)
    return response.status_code


def create_issue_with_attachment(url, summary, body, text, filename, key_value="ITTIX",
                                 issue_type="10002"):
    """Creates and issue with attachment (attaches the log onto the jira ticket)

    Arguments:
        url {string} -- Jira rest URL
        summary {str} -- summary title for jira ticket
        body {str} -- body message
        text {str} -- text for json log
        filename {str} -- filename json

    Keyword Arguments:
     key_value {str} -- [description] (default: {"ITTIX"})
        issue_type {str} -- [description] (default: {"10002"})

    Returns:
        int -- Returns int if successful, else none.P
    """
    key = create_issue(url, summary, body, key_value, issue_type)
    status = add_text_as_attachment(key, text, filename)
    return status if status == 200 else None
